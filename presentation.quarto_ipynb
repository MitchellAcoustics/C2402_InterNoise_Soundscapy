{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "283ccb40",
   "metadata": {},
   "source": [
    "---\n",
    "title: Soundscapy\n",
    "subtitle: A Python Package for Soundscape Assessment and Analysis\n",
    "title-slide-attributes: \n",
    "  data-background-image: images/LightLogo.png\n",
    "  data-background-position: right 20% bottom 50%\n",
    "  data-background-size: 25%\n",
    "author:\n",
    "  - name: Andrew Mitchell\n",
    "    orcid: 0000-0003-0978-5046\n",
    "    email: a.j.mitchell@ucl.ac.uk\n",
    "    affiliation: Bartlett School of Sustainable Construction\n",
    "institute: University College London\n",
    "format:\n",
    "  clean-revealjs: \n",
    "    code-overflow: wrap\n",
    "    width: 1512\n",
    "    height: 982\n",
    "    highlight-style: pygments\n",
    "    logo: images/internoise2024.png\n",
    "  beamer: \n",
    "    aspectratio: 1610\n",
    "    navigation: horizontal\n",
    "    theme: metropolis\n",
    "    fontsize: \"8pt\"\n",
    "    include-in-header:\n",
    "      - text: |\n",
    "          \\AddToHook{env/Highlighting/begin}{\\tiny}    \n",
    "    # monofontoptions: \n",
    "    #   - Scale=0.55\n",
    "html-math-method:\n",
    "  method: mathjax\n",
    "  url: 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'\n",
    "date: '2024-08-26'\n",
    "bibliography: FellowshipRefs-biblatex.bib\n",
    "execute:\n",
    "  echo: true\n",
    "  freeze: auto\n",
    "  cache: true\n",
    "  keep-ipynb: true\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c6ff96df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from pathlib import Path\n",
    "import warnings\n",
    "\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d69f762",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    ":::::: columns\n",
    ":::: {.column .incremental width=\"60%\"}\n",
    "- Soundscape: A holistic approach to understanding and assessing acoustic environments\n",
    "- ISO 12913 series provides a standardized framework for soundscape data collection and analysis (introduced in 2018)\n",
    "- Despite standardization, challenges persist in consistent application and interpretation\n",
    "\n",
    "::: {.fragment .incremental}\n",
    "**Soundscapy** addresses these challenges through:\n",
    "\n",
    "- An open-source Python package accessible to researchers and practitioners\n",
    "- Alignment with ISO 12913-3 guidelines for consistency (including upcoming revisions)\n",
    "- Facilitating reproducible and standardized analysis workflows\n",
    "- Bridging the gap between theoretical soundscape concepts and practical applications\n",
    "- Enabling large-scale soundscape studies with efficient data processing\n",
    ":::\n",
    "::::\n",
    "\n",
    "::: {.column width=\"40%\"}\n",
    "![ISO 12913-3 recommendations for soundscape analysis](images/ISO12913-3-screenshot.png)\n",
    ":::\n",
    "::::::\n",
    "\n",
    "::: notes\n",
    "- Introduce the concept of soundscape as a holistic approach to acoustic environments\n",
    "- Highlight the importance of the ISO 12913 series in standardizing soundscape assessment\n",
    "- Emphasize the ongoing challenges in applying these standards consistently across studies\n",
    "- Present Soundscapy as a comprehensive solution to these challenges\n",
    "- Mention its strict alignment with ISO guidelines and focus on reproducibility and standardization\n",
    "- Highlight how Soundscapy bridges the gap between theory and practice in soundscape research\n",
    ":::\n",
    "\n",
    "\n",
    "## Soundscapy: Origins and Purpose\n",
    "\n",
    "::::::: columns\n",
    "::::: {.column width=\"65%\"}\n",
    "- Developed as part of the Soundscape Indices (SSID) project, an ERC Horizon 2020 Grant\n",
    "- Built upon the SSID Protocol, a standardized method for *in situ* soundscape data collection\n",
    "- Builds upon the extensive International Soundscape Database (ISD) and other ISO 12913-2 datasets\n",
    "\n",
    "::: fragment\n",
    "Key features and innovations:\n",
    "\n",
    "- Advanced visualization using distributional methods for nuanced soundscape representation\n",
    "- Comprehensive psychoacoustic and acoustic analysis capabilities for binaural recordings\n",
    "- Optimized for efficient processing of large-scale soundscape datasets\n",
    "- Ensures consistency with ISO 12913-3 guidelines throughout the analysis pipeline\n",
    ":::\n",
    "\n",
    ":::::\n",
    "\n",
    "::: {.column width=\"35%\"}\n",
    "![](images/LightLogo.png){.r-stretch}\n",
    "\n",
    "### Simple installation and intuitive usage\n",
    "\n",
    "``` bash\n",
    "pip install soundscapy\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eabff41c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import soundscapy as sspy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d921cd",
   "metadata": {},
   "source": [
    ":::\n",
    ":::::::\n",
    "\n",
    "::: notes\n",
    "- Explain Soundscapy's origins within the context of the SSID project, a significant research initiative\n",
    "- Highlight its foundation on the SSID Protocol, emphasizing standardized data collection methods\n",
    "- Discuss the integration with the International Soundscape Database (ISD) and its importance\n",
    "- Emphasize key features: advanced visualization, comprehensive analysis capabilities, and scalability\n",
    "- Demonstrate the simplicity of installation and basic usage with code examples\n",
    "- Reinforce Soundscapy's adherence to ISO standards, ensuring consistency in soundscape research\n",
    "- Highlight how Soundscapy makes advanced soundscape analysis techniques accessible to a wider audience\n",
    ":::\n",
    "\n",
    "\n",
    "## Soundscape Circumplex Model\n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"60%\"}\n",
    "-   Proposed by @Axelsson2010principal\n",
    "-   Comprises two orthogonal dimensions that capture key aspects of soundscape perception:\n",
    "    -   Pleasant-Annoying (x-axis)\n",
    "    -   Eventful-Uneventful (y-axis)\n",
    "-   Eight perceptual scales\n",
    "-   Officially adopted in ISO/TS 12913-2, quickly becoming the dominant soundscape perception assessment method^[@Aletta2023Adoption]\n",
    "-   Serves as the cornerstone for Soundscapy's analytical approach and visualisations\n",
    ":::\n",
    "\n",
    "::: {.column width=\"40%\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bf369138",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "sample_transform = {\n",
    "    \"RecordID\": [\"EX1\", \"EX2\"],\n",
    "    \"pleasant\": [4, 2],\n",
    "    \"vibrant\": [4, 3],\n",
    "    \"eventful\": [4, 5],\n",
    "    \"chaotic\": [2, 5],\n",
    "    \"annoying\": [1, 5],\n",
    "    \"monotonous\": [3, 5],\n",
    "    \"uneventful\": [3, 3],\n",
    "    \"calm\": [4, 1],\n",
    "}\n",
    "sample_transform = pd.DataFrame().from_dict(sample_transform)\n",
    "sample_transform = sample_transform.set_index(\"RecordID\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "likert-radar",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<PolarAxes: >"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3000x2100 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: likert-radar\n",
    "from soundscapy.plotting import likert\n",
    "likert.paq_radar_plot(sample_transform)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0343d188",
   "metadata": {},
   "source": [
    ":::\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "- Provide a detailed explanation of the Soundscape Circumplex Model and its significance\n",
    "- Highlight its importance in standardizing soundscape assessment methodologies\n",
    "- Discuss its adoption in ISO/TS 12913-2 and its widespread use in soundscape research globally\n",
    "- Explain how Soundscapy implements and extends this model in its analysis framework\n",
    "- Demonstrate the radar plot visualization, explaining how it represents the eight perceptual scales\n",
    "- Discuss how this model enables nuanced comparisons between different soundscapes\n",
    "- Highlight how Soundscapy makes working with this model more accessible and consistent\n",
    ":::\n",
    "\n",
    "## ISO Coordinates Calculation\n",
    "\n",
    "::: columns\n",
    ":::: {.column width=\"48%\"}\n",
    "-   Transforms 8 PAQ responses into 2D coordinates\n",
    "-   Implements improved equations from ISO 12913-3 upcoming revisions\n",
    "-   Offers flexible input ranges (e.g., 1-5, 0-100) to accommodate various survey designs\n",
    "-   Supports different angle configurations for various survey translations^[@Aletta2024Soundscape]\n",
    "\n",
    "$$\n",
    "P_{ISO} = \\frac{1}{\\lambda_{Pl}} \\sum_{i=1}^{8} \\cos{\\theta_i} \\cdot \\sigma_i\n",
    "$$ {#eq-isopl}\n",
    "\n",
    "$$\n",
    "E_{ISO} = \\frac{1}{\\lambda_{Pl}} \\sum_{i=1}^{8} \\sin{\\theta_i} \\cdot \\sigma_i\n",
    "$$ {#eq-isoev}\n",
    "\n",
    "::::\n",
    "\n",
    ":::: {.column width=\"48%\"}\n",
    "::::: {.r-stack}\n",
    ":::::: {.fragment .fade-out}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f42fb86f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load data from the ISD\n",
    "data = sspy.isd.load()\n",
    "\n",
    "# Apply built-in data quality checks\n",
    "data, excl_data = sspy.isd.validate(data, allow_paq_na=False)\n",
    "\n",
    "# Calculate the ISO Coordinates\n",
    "data = sspy.surveys.add_iso_coords(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "05c5a878",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PAQ1</th>\n",
       "      <th>PAQ2</th>\n",
       "      <th>PAQ3</th>\n",
       "      <th>PAQ4</th>\n",
       "      <th>PAQ5</th>\n",
       "      <th>PAQ6</th>\n",
       "      <th>PAQ7</th>\n",
       "      <th>PAQ8</th>\n",
       "      <th>ISOPleasant</th>\n",
       "      <th>ISOEventful</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.219670</td>\n",
       "      <td>-0.133883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.426777</td>\n",
       "      <td>0.530330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.676777</td>\n",
       "      <td>-0.073223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.603553</td>\n",
       "      <td>-0.146447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.457107</td>\n",
       "      <td>-0.146447</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PAQ1  PAQ2  PAQ3  PAQ4  PAQ5  PAQ6  PAQ7  PAQ8  ISOPleasant  ISOEventful\n",
       "0   2.0   4.0   2.0   1.0   2.0   2.0   4.0   2.0     0.219670    -0.133883\n",
       "1   2.0   4.0   4.0   4.0   4.0   4.0   1.0   1.0    -0.426777     0.530330\n",
       "2   5.0   3.0   3.0   1.0   2.0   1.0   3.0   4.0     0.676777    -0.073223\n",
       "3   5.0   3.0   3.0   1.0   2.0   2.0   3.0   4.0     0.603553    -0.146447\n",
       "4   5.0   3.0   3.0   2.0   2.0   3.0   3.0   4.0     0.457107    -0.146447"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| echo: false\n",
    "view_data = sspy.surveys.return_paqs(data, incl_ids = False, other_cols = ['ISOPleasant', 'ISOEventful'])\n",
    "view_data.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4238ed78",
   "metadata": {},
   "source": [
    "::::::\n",
    "\n",
    ":::::: {.fragment}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3701d06d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<PolarAxes: >"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3000x2100 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| echo: false\n",
    "likert.paq_radar_plot(sample_transform)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f57f0963",
   "metadata": {},
   "source": [
    "::::::\n",
    "\n",
    ":::::: {.fragment}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ce11b0d0",
   "metadata": {
    "width": "125%"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Soundscape Scatter Plot'}, xlabel='ISOPleasant', ylabel='ISOEventful'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2400x2400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| code-fold: true\n",
    "import seaborn as sns\n",
    "sample_transform = sspy.surveys.rename_paqs(sample_transform)\n",
    "sample_transform = sspy.surveys.add_iso_coords(sample_transform, overwrite=True)\n",
    "colors = [\"b\", \"r\"]\n",
    "palette = sns.color_palette(colors)\n",
    "sspy.plotting.scatter_plot(sample_transform, hue=\"RecordID\", palette=palette, diagonal_lines=True, legend=\"brief\", s=100, figsize=(8,8))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a6820f2",
   "metadata": {},
   "source": [
    "::::::\n",
    ":::::\n",
    "\n",
    "::::\n",
    ":::\n",
    "\n",
    "::: notes\n",
    " - Explain the purpose and functionality of ISO coordinate calculation in detail\n",
    " - Highlight the strict alignment with ISO 12913-3 equations, ensuring standardized analysis\n",
    " - Emphasize the flexibility in handling different input ranges and angle configurations\n",
    " - Demonstrate the process with a step-by-step code example\n",
    " - Discuss the importance of this function in Soundscapy's analysis pipeline\n",
    " - Explain how this standardized approach enables consistent comparisons across studies\n",
    "\n",
    ":::\n",
    "\n",
    "## Distribution-based Analysis\n",
    "\n",
    "::::::::: columns\n",
    "::: {.column width=\"50%\"}\n",
    "-   Developed by @Mitchell2022How\n",
    "-   Represents the collective perception of a soundscape as a distribution, using kernel density estimation\n",
    "\n",
    " - Key Benefits:\n",
    "   - Visualizes central tendency, dispersion, and skewness of perceptions\n",
    "   - Illustrates the shape and extent of soundscape perception in circumplex space\n",
    "   - Allows for statistical comparisons between different soundscapes or groups\n",
    " - Additional features:\n",
    "   - Calculation of percentiles and other statistical measures\n",
    "   - Multiple visualization options (both Seaborn and Plotly backends available)\n",
    ":::\n",
    "\n",
    "::::::: {.column width=\"50%\"}\n",
    ":::::: r-stack\n",
    "::: {.fragment .fade-out}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "139efa31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Camden Town Soundscape Distribution'}, xlabel='ISOPleasant', ylabel='ISOEventful'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1500x1500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sspy.plotting.density_plot(\n",
    "  sspy.isd.select_location_ids(data, \"CamdenTown\"),\n",
    "  title=\"Camden Town Soundscape Distribution\",\n",
    "  hue=\"LocationID\",\n",
    "  incl_scatter=True\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e4b2734",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "::: {.fragment .fade-in-then-out}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "04b28eb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Comparison between two soundscapes'}, xlabel='ISOPleasant', ylabel='ISOEventful'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1500x1500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| code-line-numbers: '2,7'\n",
    "sspy.plotting.density_plot(\n",
    "  sspy.isd.select_location_ids(data, (\"CamdenTown\", \"PancrasLock\")),\n",
    "  title = \"Comparison between two soundscapes\",\n",
    "  hue = \"LocationID\",\n",
    "  incl_scatter=True,\n",
    "  incl_outline=True,\n",
    "  simple_density=True,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a03d31b7",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "::: fragment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c6b276f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/soundscapy/plotting/backends.py:246: UserWarning:\n",
      "\n",
      "PlotlyBackend is very experimental and not fully implemented.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-2.34.0.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>                            <div id=\"43a8c217-444d-44f6-8431-eca84346a770\" class=\"plotly-graph-div\" style=\"height:600px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"43a8c217-444d-44f6-8431-eca84346a770\")) {                    Plotly.newPlot(                        \"43a8c217-444d-44f6-8431-eca84346a770\",                        [{\"hovertemplate\":\"ISOPleasant=%{x}\\u003cbr\\u003eISOEventful=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[1.0,0.9267766952966369,0.13388347648318433,0.10355339059327368,0.24999999999999992,0.24999999999999992,0.9267766952966369,0.28033008588991065,0.04289321881345233,0.5303300858899105,0.9267766952966369,0.9267766952966369,0.9267766952966369,0.17677669529663675,0.7803300858899105,0.8964466094067263,0.6035533905932736,0.6035533905932737,0.8535533905932737,0.48743686707645795,0.6035533905932736,0.9267766952966369,0.5303300858899106,0.5606601717798212,0.5303300858899106,1.0,0.7071067811865475,0.8535533905932738,0.823223304703363,0.6338834764831843,0.3535533905932737,0.7071067811865474,0.6767766952966369,0.7071067811865475,-0.2928932188134526,0.7803300858899106,0.8535533905932737,0.7071067811865475,-0.0428932188134526,-0.03033008588991079,0.5303300858899106,0.8535533905932737,1.0,0.9267766952966369,0.7499999999999999,0.6338834764831843,0.8535533905932737,0.7071067811865475,0.6035533905932736,0.7071067811865474,0.8535533905932737,0.8535533905932737,0.6338834764831843,0.823223304703363,0.573223304703363,0.9267766952966369,0.9267766952966369,0.9267766952966369,0.7803300858899106,0.6338834764831843,-0.7803300858899109,0.6338834764831843,0.6338834764831843,0.7071067811865476,0.6035533905932737,0.8535533905932737,0.5606601717798211,0.7071067811865475,0.49999999999999983,0.6767766952966369,1.0,0.5303300858899106,0.8535533905932737,0.6767766952966368,0.9267766952966369,0.9267766952966369,0.6767766952966368,0.8535533905932737,0.45710678118654746,0.45710678118654746,0.5606601717798212,0.45710678118654746,0.7803300858899105,0.7803300858899107,0.9267766952966369,0.24999999999999992,0.7803300858899106,0.823223304703363,0.9267766952966369,1.0,1.0],\"xaxis\":\"x\",\"y\":[0.3106601717798213,0.23743686707645814,0.13388347648318455,-9.197388681172371e-17,0.0,0.10355339059327377,-0.07322330470336316,0.6338834764831844,-0.1893398282201789,0.13388347648318427,0.030330085889910513,0.23743686707645814,-0.03033008588991079,-0.2196699141100894,-0.07322330470336316,0.20710678118654754,0.16421356237309498,0.10355339059327358,0.4142135623730951,-0.5125631329235418,-0.2071067811865477,0.030330085889910607,0.17677669529663675,-0.14644660940672632,-0.15900974233026818,0.4142135623730951,0.14644660940672613,0.06066017177982121,0.23743686707645814,0.030330085889910423,0.14644660940672624,0.20710678118654735,-0.01256313292354195,-0.14644660940672632,0.10355339059327368,0.2803300858899107,0.20710678118654754,-0.20710678118654754,-0.3106601717798213,0.07322330470336307,0.07322330470336307,-0.14644660940672632,0.3106601717798213,-0.2803300858899107,-0.14644660940672632,0.42677669529663687,-0.14644660940672632,-0.39644660940672644,-0.1464466094067264,0.060660171779821026,0.10355339059327358,-0.3106601717798213,-0.2196699141100895,0.17677669529663692,0.23743686707645814,-0.2803300858899107,-0.38388347648318444,-0.07322330470336316,-0.21966991411008943,0.09099025766973182,-0.6338834764831843,-0.36611652351681573,-0.5732233047033634,0.12132034355964261,-0.6035533905932738,-0.2500000000000001,-0.5000000000000002,0.060660171779821304,0.04289321881345246,0.030330085889910607,0.20710678118654743,-0.42677669529663703,0.20710678118654735,0.17677669529663684,-0.07322330470336316,0.13388347648318438,0.030330085889910607,0.20710678118654743,-0.04289321881345256,-9.197388681172371e-17,-0.14644660940672632,0.0,-0.5303300858899108,0.5303300858899106,0.13388347648318438,0.0,-0.2196699141100895,-0.07322330470336316,0.13388347648318438,0.4142135623730951,0.20710678118654743],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"ISOPleasant\"},\"range\":[-1,1],\"scaleanchor\":\"y\",\"scaleratio\":1},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"ISOEventful\"},\"range\":[-1,1],\"scaleanchor\":\"x\",\"scaleratio\":1},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Regents Park Japanese Garden Soundscape\"},\"width\":600,\"height\":600},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('43a8c217-444d-44f6-8431-eca84346a770');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| code-line-numbers: \"|1,6\"\n",
    "from soundscapy.plotting import Backend\n",
    "import plotly.io as pio\n",
    "\n",
    "sspy.plotting.scatter_plot(\n",
    "  sspy.isd.select_location_ids(data, (\"RegentsParkJapan\")),\n",
    "  backend = Backend.PLOTLY,\n",
    "  title = \"Regents Park Japanese Garden Soundscape\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d5fd36",
   "metadata": {},
   "source": [
    ":::\n",
    "::::::\n",
    ":::::::\n",
    ":::::::::\n",
    "\n",
    "::: notes\n",
    "This distribution-based visualisation and analysis clearly shows three important characteristics of the soundscape perception of a group or location: 1. The distribution across both pleasantness and eventfulness, including the central tendency, the dispersion, and any skewness in the response. 2. The general shape of the soundscape within the circumplex space - in this case, Pancras Lock is mostly in the pleasant half, with a slight skew towards eventfulness. Proceedings of INTER-NOISE 2024 3. The degree of agreement about the soundscape perception among the sample. In addition to these visualisations, Soundscapy provides functions for calculating some basic statistics about the distribution of responses, such as the mean, median, and standard deviation, as well as metrics inspired by reporting from noise annoyance studies, such as the percentage of respondents who rated the soundscape as ‘pleasant’ or ‘eventful’.\n",
    ":::\n",
    "\n",
    "## Databases Integration\n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"50%\"}\n",
    "-   International Soundscape Database (ISD)^[@Mitchell2021International]\n",
    "    -   2,706 high-quality, real-world binaural recordings\n",
    "    -   3,589 *in situ* survey responses\n",
    "    -   Data from 6 cities across Europe and China\n",
    "-   Soundscape Attributes Translation Project (SATP)^[@Oberman2024Soundscape]\n",
    "    -   19,089 responses\n",
    "    -   708 participants\n",
    "    -   19 languages\n",
    "-   ARAUS (Affective Responsees to Augmented Urban Soundscapes)^[@Ooi2023ARAUS]\n",
    "    -   Currently under development\n",
    "    -   Large-scale lab-based dataset of augmented soundscapes\n",
    ":::\n",
    "\n",
    "::: {.column width=\"50%\"}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "database-load",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ISD shape: (3589, 142)\n",
      "SATP shape: (17441, 16)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>ISOPleasant</th>\n",
       "      <th>ISOEventful</th>\n",
       "      <th>pleasant</th>\n",
       "      <th>eventful</th>\n",
       "      <th>vibrant</th>\n",
       "      <th>chaotic</th>\n",
       "      <th>monotonous</th>\n",
       "      <th>calm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CarloV</th>\n",
       "      <td>126</td>\n",
       "      <td>0.518</td>\n",
       "      <td>-0.012</td>\n",
       "      <td>0.865</td>\n",
       "      <td>0.413</td>\n",
       "      <td>0.365</td>\n",
       "      <td>0.048</td>\n",
       "      <td>0.008</td>\n",
       "      <td>0.484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SanMarco</th>\n",
       "      <td>99</td>\n",
       "      <td>0.221</td>\n",
       "      <td>0.373</td>\n",
       "      <td>0.707</td>\n",
       "      <td>0.848</td>\n",
       "      <td>0.616</td>\n",
       "      <td>0.222</td>\n",
       "      <td>0.020</td>\n",
       "      <td>0.091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PlazaBibRambla</th>\n",
       "      <td>24</td>\n",
       "      <td>0.463</td>\n",
       "      <td>-0.023</td>\n",
       "      <td>0.667</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.042</td>\n",
       "      <td>0.292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CamdenTown</th>\n",
       "      <td>105</td>\n",
       "      <td>-0.103</td>\n",
       "      <td>0.364</td>\n",
       "      <td>0.352</td>\n",
       "      <td>0.895</td>\n",
       "      <td>0.295</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.038</td>\n",
       "      <td>0.057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EustonTap</th>\n",
       "      <td>100</td>\n",
       "      <td>-0.211</td>\n",
       "      <td>0.190</td>\n",
       "      <td>0.240</td>\n",
       "      <td>0.780</td>\n",
       "      <td>0.170</td>\n",
       "      <td>0.610</td>\n",
       "      <td>0.140</td>\n",
       "      <td>0.060</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count  ISOPleasant  ISOEventful  pleasant  eventful  vibrant  \\\n",
       "CarloV            126        0.518       -0.012     0.865     0.413    0.365   \n",
       "SanMarco           99        0.221        0.373     0.707     0.848    0.616   \n",
       "PlazaBibRambla     24        0.463       -0.023     0.667     0.417    0.375   \n",
       "CamdenTown        105       -0.103        0.364     0.352     0.895    0.295   \n",
       "EustonTap         100       -0.211        0.190     0.240     0.780    0.170   \n",
       "\n",
       "                chaotic  monotonous   calm  \n",
       "CarloV            0.048       0.008  0.484  \n",
       "SanMarco          0.222       0.020  0.091  \n",
       "PlazaBibRambla    0.042       0.042  0.292  \n",
       "CamdenTown        0.600       0.038  0.057  \n",
       "EustonTap         0.610       0.140  0.060  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: database-load\n",
    "# Load ISD data\n",
    "isd_data = sspy.isd.load()\n",
    "\n",
    "# Load SATP data\n",
    "import soundscapy.databases.satp as satp\n",
    "satp_data = satp.load_zenodo()\n",
    "\n",
    "print(f\"ISD shape: {isd_data.shape}\")\n",
    "print(f\"SATP shape: {satp_data.shape}\")\n",
    "\n",
    "sspy.isd.soundscapy_describe(isd_data).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78f820b9",
   "metadata": {},
   "source": [
    ":::\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Key benefits:\n",
    "\n",
    "- Instant access to large, diverse, and high-quality datasets\n",
    "- Facilitates robust cross-cultural and multi-lingual studies\n",
    "- Enables large-scale analysis and meta-studies\n",
    "- Promotes standardization and comparability in soundscape research\n",
    "\n",
    "- Explain the significance of integrated databases in Soundscapy and their impact on research capabilities\n",
    "- Highlight the ease of loading and working with these extensive datasets\n",
    "- Discuss the potential for cross-cultural and multi-lingual soundscape studies using these resources\n",
    "- Demonstrate basic data loading, exploration, and description with code examples\n",
    "- Mention the upcoming integration of ARAUS and its implications for augmented reality soundscape research\n",
    "- Emphasize how these databases enable more comprehensive and generalizable soundscape studies\n",
    ":::\n",
    "\n",
    "## Psychoacoustic Analysis {.smaller}\n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"50%\"}\n",
    "**Integration with multiple libraries:**\n",
    "\n",
    "-   Python Acoustics: For standard acoustic metrics\n",
    "-   scikit-maad: Advanced ecological soundscape analysis\n",
    "-   MoSQITo: Psychoacoustics metrics\n",
    "\n",
    "**Wide range of metrics:**\n",
    "\n",
    "-   SPL ($L_{Zeq}$, $L_{Aeq}$, $L_{Ceq}$)\n",
    "-   Loudness (N)\n",
    "-   Sharpness (S)\n",
    "-   Roughness (R)\n",
    "-   Bioacoustic Indices\n",
    "-   Many more...\n",
    "\n",
    "**Key advantages:**\n",
    "\n",
    "-   Completely free, open license, and open source\n",
    "-   Adherence to ISO and other relevant standards\n",
    "-   Optimized for binaural recordings\n",
    "-   Consistent calculation methods across studies\n",
    "-   Extensible framework for adding new metrics\n",
    ":::\n",
    "\n",
    ":::: {.column width=\"50%\"}\n",
    "\n",
    "::: {.fragment style=\"font-size: 120%\" .semi-fade-out}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "binaural-analysis",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>LAeq</th>\n",
       "      <th>LAeq_5</th>\n",
       "      <th>LAeq_50</th>\n",
       "      <th>LAeq_max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recording</th>\n",
       "      <th>Channel</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">CT101</th>\n",
       "      <th>Left</th>\n",
       "      <td>68.89</td>\n",
       "      <td>72.27</td>\n",
       "      <td>68.12</td>\n",
       "      <td>77.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right</th>\n",
       "      <td>69.96</td>\n",
       "      <td>73.63</td>\n",
       "      <td>68.50</td>\n",
       "      <td>78.71</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    LAeq  LAeq_5  LAeq_50  LAeq_max\n",
       "Recording Channel                                  \n",
       "CT101     Left     68.89   72.27    68.12     77.39\n",
       "          Right    69.96   73.63    68.50     78.71"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| label: binaural-analysis\n",
    "from soundscapy.audio.analysis_settings import MetricSettings\n",
    "from soundscapy.audio import Binaural\n",
    "\n",
    "b = Binaural.from_wav(\"data/CT101.wav\")\n",
    "\n",
    "laeq_settings = MetricSettings(\n",
    "    run = True,\n",
    "    statistics = (5, 50, 'avg', 'max'),\n",
    "    label=\"LAeq\",\n",
    ")\n",
    "\n",
    "b.pyacoustics_metric('LAeq', metric_settings=laeq_settings).round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a264a280",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "::: {.fragment style=\"font-size: 120%\"}\n",
    "\\\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b2f0ac74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>S_5</th>\n",
       "      <th>S_10</th>\n",
       "      <th>S_50</th>\n",
       "      <th>S_90</th>\n",
       "      <th>S_95</th>\n",
       "      <th>S_avg</th>\n",
       "      <th>S_max</th>\n",
       "      <th>S_min</th>\n",
       "      <th>S_kurt</th>\n",
       "      <th>S_skew</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recording</th>\n",
       "      <th>Channel</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">CT101</th>\n",
       "      <th>Left</th>\n",
       "      <td>1.34</td>\n",
       "      <td>1.32</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.13</td>\n",
       "      <td>1.23</td>\n",
       "      <td>1.90</td>\n",
       "      <td>1.00</td>\n",
       "      <td>16.01</td>\n",
       "      <td>2.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right</th>\n",
       "      <td>1.41</td>\n",
       "      <td>1.36</td>\n",
       "      <td>1.25</td>\n",
       "      <td>1.16</td>\n",
       "      <td>1.14</td>\n",
       "      <td>1.26</td>\n",
       "      <td>1.72</td>\n",
       "      <td>1.06</td>\n",
       "      <td>4.53</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    S_5  S_10  S_50  S_90  S_95  S_avg  S_max  S_min  S_kurt  \\\n",
       "Recording Channel                                                              \n",
       "CT101     Left     1.34  1.32  1.23  1.16  1.13   1.23   1.90   1.00   16.01   \n",
       "          Right    1.41  1.36  1.25  1.16  1.14   1.26   1.72   1.06    4.53   \n",
       "\n",
       "                   S_skew  \n",
       "Recording Channel          \n",
       "CT101     Left       2.09  \n",
       "          Right      1.48  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.mosqito_metric('sharpness_din_perseg').round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baf44aac",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "::::\n",
    "\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Highlight the comprehensive psychoacoustic analysis capabilities. Mention the integration with established libraries. Emphasize the simplicity of performing complex analyses. Discuss the importance of these metrics in soundscape assessment.\n",
    ":::\n",
    "\n",
    "## Batch Processing and Performance {.scrollable}\n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"50%\"}\n",
    "- **Unified Output Format**: Ensures consistency across datasets, simplifying analysis.\n",
    "\n",
    "- **Parallel Processing**: Leverages multi-core CPUs for efficient computation.\n",
    "\n",
    "- **Reproducbible Analysis**: Shareable plain-text analysis configuration and documentation.\n",
    "\n",
    "**Performance Example**:\n",
    "\n",
    "- 20 recordings (10 min 41 sec total)\n",
    "- Serial processing: 29.4 minutes\n",
    "- Parallel processing: 7.7 minutes\n",
    "- Speed-up factor: 3.8x\n",
    ":::\n",
    "\n",
    "::: {.column width=\"50%\"}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2e875be2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "__spec__ = None # Who fucking knows why: https://stackoverflow.com/questions/45720153/python-multiprocessing-error-attributeerror-module-main-has-no-attribute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "audio-analysis",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3a8887622ca84875938465cd885bb3e7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Analyzing files:   0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/_signal.py:175: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  self *= factor\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:110: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return (pressure**2.0 / fs).sum(axis=axis)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/_core/_methods.py:52: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return umr_sum(a, axis, dtype, out, keepdims, initial, where)\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/acoustics/standards/iso_tr_25417_2007.py:125: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  return 10.0 * np.log10(sound_exposure(pressure, fs, axis=axis) / reference_sound_exposure)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/maad/features/temporal.py:132: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  zero_crosses = np.nonzero(np.diff(s > 0))[0]\n",
      "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/lib/python3.11/site-packages/numpy/lib/_function_base_impl.py:1452: DeprecationWarning: __array_wrap__ must accept context and return_scalar arguments (positionally) in the future. (Deprecated NumPy 2.0)\n",
      "  a = op(a[slice1], a[slice2])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n",
      "[Warning] Signal resampled to 48 kHz to allow calculation. To fulfill the standard requirements fs should be >=48 kHz.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>LAeq</th>\n",
       "      <th>LAeq_5</th>\n",
       "      <th>LAeq_10</th>\n",
       "      <th>LAeq_50</th>\n",
       "      <th>LAeq_90</th>\n",
       "      <th>LAeq_95</th>\n",
       "      <th>LAeq_min</th>\n",
       "      <th>LAeq_max</th>\n",
       "      <th>LAeq_kurt</th>\n",
       "      <th>LAeq_skew</th>\n",
       "      <th>...</th>\n",
       "      <th>TFSD</th>\n",
       "      <th>H_Havrda</th>\n",
       "      <th>H_Renyi</th>\n",
       "      <th>H_pairedShannon</th>\n",
       "      <th>H_gamma</th>\n",
       "      <th>H_GiniSimpson</th>\n",
       "      <th>RAOQ</th>\n",
       "      <th>AGI</th>\n",
       "      <th>ROItotal</th>\n",
       "      <th>ROIcover</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Recording</th>\n",
       "      <th>Channel</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">CT108</th>\n",
       "      <th>Left</th>\n",
       "      <td>70.589507</td>\n",
       "      <td>74.558756</td>\n",
       "      <td>73.843937</td>\n",
       "      <td>69.525786</td>\n",
       "      <td>64.824693</td>\n",
       "      <td>64.187174</td>\n",
       "      <td>62.768378</td>\n",
       "      <td>75.729902</td>\n",
       "      <td>-0.672714</td>\n",
       "      <td>-0.097663</td>\n",
       "      <td>...</td>\n",
       "      <td>0.601720</td>\n",
       "      <td>0.315433</td>\n",
       "      <td>1.462151</td>\n",
       "      <td>3.302710</td>\n",
       "      <td>1379.622896</td>\n",
       "      <td>0.816123</td>\n",
       "      <td>0.017529</td>\n",
       "      <td>1.460654</td>\n",
       "      <td>22</td>\n",
       "      <td>0.849617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right</th>\n",
       "      <td>70.112106</td>\n",
       "      <td>73.867805</td>\n",
       "      <td>73.206158</td>\n",
       "      <td>69.500252</td>\n",
       "      <td>63.767889</td>\n",
       "      <td>63.381380</td>\n",
       "      <td>62.296449</td>\n",
       "      <td>76.077951</td>\n",
       "      <td>-1.033197</td>\n",
       "      <td>-0.220893</td>\n",
       "      <td>...</td>\n",
       "      <td>0.597461</td>\n",
       "      <td>0.312580</td>\n",
       "      <td>1.388225</td>\n",
       "      <td>3.167239</td>\n",
       "      <td>1171.735670</td>\n",
       "      <td>0.799022</td>\n",
       "      <td>0.013242</td>\n",
       "      <td>1.623013</td>\n",
       "      <td>5</td>\n",
       "      <td>1.254925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">CT107</th>\n",
       "      <th>Left</th>\n",
       "      <td>68.044340</td>\n",
       "      <td>72.248420</td>\n",
       "      <td>71.395037</td>\n",
       "      <td>66.199040</td>\n",
       "      <td>62.448782</td>\n",
       "      <td>61.533067</td>\n",
       "      <td>60.039913</td>\n",
       "      <td>76.177939</td>\n",
       "      <td>-0.535311</td>\n",
       "      <td>0.386803</td>\n",
       "      <td>...</td>\n",
       "      <td>0.596434</td>\n",
       "      <td>0.306238</td>\n",
       "      <td>1.254894</td>\n",
       "      <td>3.044223</td>\n",
       "      <td>1338.067296</td>\n",
       "      <td>0.770212</td>\n",
       "      <td>0.014416</td>\n",
       "      <td>1.821029</td>\n",
       "      <td>31</td>\n",
       "      <td>3.092858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Right</th>\n",
       "      <td>66.957640</td>\n",
       "      <td>71.154329</td>\n",
       "      <td>69.520778</td>\n",
       "      <td>65.567530</td>\n",
       "      <td>62.737097</td>\n",
       "      <td>62.105325</td>\n",
       "      <td>59.427035</td>\n",
       "      <td>73.699931</td>\n",
       "      <td>-0.229152</td>\n",
       "      <td>0.490734</td>\n",
       "      <td>...</td>\n",
       "      <td>0.600826</td>\n",
       "      <td>0.301908</td>\n",
       "      <td>1.180762</td>\n",
       "      <td>2.863631</td>\n",
       "      <td>875.440353</td>\n",
       "      <td>0.747898</td>\n",
       "      <td>0.008257</td>\n",
       "      <td>1.578739</td>\n",
       "      <td>45</td>\n",
       "      <td>2.396588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CT101</th>\n",
       "      <th>Left</th>\n",
       "      <td>68.875703</td>\n",
       "      <td>72.257301</td>\n",
       "      <td>71.154342</td>\n",
       "      <td>68.113339</td>\n",
       "      <td>63.375091</td>\n",
       "      <td>62.366533</td>\n",
       "      <td>60.560166</td>\n",
       "      <td>77.382651</td>\n",
       "      <td>0.272011</td>\n",
       "      <td>-0.013877</td>\n",
       "      <td>...</td>\n",
       "      <td>0.596465</td>\n",
       "      <td>0.306220</td>\n",
       "      <td>1.254552</td>\n",
       "      <td>2.981413</td>\n",
       "      <td>1004.342366</td>\n",
       "      <td>0.767638</td>\n",
       "      <td>0.012133</td>\n",
       "      <td>1.502836</td>\n",
       "      <td>38</td>\n",
       "      <td>1.794776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 131 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        LAeq     LAeq_5    LAeq_10    LAeq_50    LAeq_90  \\\n",
       "Recording Channel                                                          \n",
       "CT108     Left     70.589507  74.558756  73.843937  69.525786  64.824693   \n",
       "          Right    70.112106  73.867805  73.206158  69.500252  63.767889   \n",
       "CT107     Left     68.044340  72.248420  71.395037  66.199040  62.448782   \n",
       "          Right    66.957640  71.154329  69.520778  65.567530  62.737097   \n",
       "CT101     Left     68.875703  72.257301  71.154342  68.113339  63.375091   \n",
       "\n",
       "                     LAeq_95   LAeq_min   LAeq_max  LAeq_kurt  LAeq_skew  ...  \\\n",
       "Recording Channel                                                         ...   \n",
       "CT108     Left     64.187174  62.768378  75.729902  -0.672714  -0.097663  ...   \n",
       "          Right    63.381380  62.296449  76.077951  -1.033197  -0.220893  ...   \n",
       "CT107     Left     61.533067  60.039913  76.177939  -0.535311   0.386803  ...   \n",
       "          Right    62.105325  59.427035  73.699931  -0.229152   0.490734  ...   \n",
       "CT101     Left     62.366533  60.560166  77.382651   0.272011  -0.013877  ...   \n",
       "\n",
       "                       TFSD  H_Havrda   H_Renyi  H_pairedShannon      H_gamma  \\\n",
       "Recording Channel                                                               \n",
       "CT108     Left     0.601720  0.315433  1.462151         3.302710  1379.622896   \n",
       "          Right    0.597461  0.312580  1.388225         3.167239  1171.735670   \n",
       "CT107     Left     0.596434  0.306238  1.254894         3.044223  1338.067296   \n",
       "          Right    0.600826  0.301908  1.180762         2.863631   875.440353   \n",
       "CT101     Left     0.596465  0.306220  1.254552         2.981413  1004.342366   \n",
       "\n",
       "                   H_GiniSimpson      RAOQ       AGI  ROItotal  ROIcover  \n",
       "Recording Channel                                                         \n",
       "CT108     Left          0.816123  0.017529  1.460654        22  0.849617  \n",
       "          Right         0.799022  0.013242  1.623013         5  1.254925  \n",
       "CT107     Left          0.770212  0.014416  1.821029        31  3.092858  \n",
       "          Right         0.747898  0.008257  1.578739        45  2.396588  \n",
       "CT101     Left          0.767638  0.012133  1.502836        38  1.794776  \n",
       "\n",
       "[5 rows x 131 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#| eval: true\n",
    "#| label: audio-analysis\n",
    "#| code-line-numbers: '|1|5,6|8-12|14,15'\n",
    "from soundscapy.audio import AudioAnalysis\n",
    "\n",
    "wav_folder = Path(\"data\")\n",
    "\n",
    "# Initialize AudioAnalysis with default settings\n",
    "analysis = AudioAnalysis()\n",
    "\n",
    "# Analyse a folder of recordings\n",
    "folder_results = analysis.analyze_folder(\n",
    "    wav_folder, \n",
    "    calibration_file=\"data/Levels.json\"\n",
    ")\n",
    "\n",
    "# Print results\n",
    "folder_results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad7c5349",
   "metadata": {},
   "source": [
    ":::\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Explain batch processing benefits:\n",
    "1. Unified output for consistency and simplified analysis.\n",
    "2. Parallel processing for faster computations.\n",
    "3. Optimization for large datasets enabling comprehensive studies.\n",
    "4. Use performance example to illustrate real-world benefits.\n",
    "5. Emphasize how these features enable new types of large-scale research.\n",
    ":::\n",
    "\n",
    "## Customization and Flexibility\n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"50%\"}\n",
    "- **Reproducible Analysis**: YAML-based configs ensure consistent, replicable results.\n",
    "\n",
    "- **Version Control Friendly**: Easily track, share, and collaborate on configurations.\n",
    "\n",
    "- **Data Science Integration**:\n",
    "  - Works with pandas for data manipulation\n",
    "  - Compatible with matplotlib/seaborn and plotlly for visualizations\n",
    "  - Leverages popular Python libraries\n",
    "\n",
    "- **Extensible Architecture**: \n",
    "  - Allows addition of new metrics and methods\n",
    "  - Adaptable to diverse research requirements\n",
    "  - Potential for community-driven improvements\n",
    ":::\n",
    "\n",
    "::: {.column width=\"50%\"}\n",
    "\n",
    ":::: {.r-stack}\n",
    "\n",
    "::::: {.fragment .fade-out}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5b92442f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Customize analysis settings\n",
    "new_config = {\n",
    "  \"MoSQITo\": {\n",
    "    \"loudness_zwtv\": {\n",
    "      \"statistics\": (\"avg\", 5, 50),\n",
    "      \"func_args\": {\"field_type\": \"diffuse\"}\n",
    "    }\n",
    "  }\n",
    "}\n",
    "\n",
    "analysis.update_config(new_config)\n",
    "analysis.save_config(\"updated_config.yaml\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4be0c150",
   "metadata": {},
   "source": [
    ":::::\n",
    "\n",
    "::::: {.fragment}\n",
    "\n",
    "![](images/Soundscapy-config.png)\n",
    "\n",
    ":::::\n",
    "\n",
    ":::: \n",
    "\n",
    ":::\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Explain flexibility and customization features:\n",
    "1. YAML configs for reproducibility in research.\n",
    "2. Version control benefits for collaborative projects.\n",
    "3. Advantages of supporting various data formats.\n",
    "4. Integration with data science tools and implications for workflows.\n",
    "5. Extensible architecture allowing adaptation to different research needs.\n",
    "6. How these features make Soundscapy versatile for various soundscape studies.\n",
    ":::\n",
    "\n",
    "## Package Documentation \n",
    "\n",
    "::::: columns\n",
    "::: {.column width=\"40%\"}\n",
    "- **Comprehensive Documentation**:\n",
    "  - Installation guide\n",
    "  - Quickstart tutorials\n",
    "  - API reference\n",
    "  - Example notebooks\n",
    "\n",
    "- **GitHub Repository**:\n",
    "  - Open-source code\n",
    "  - Issue tracking\n",
    "  - Contribution guidelines\n",
    "\n",
    "- **Regular Updates**:\n",
    "  - Version changelog\n",
    "  - Deprecation notices\n",
    "  - New feature announcements\n",
    ":::\n",
    "\n",
    "::::: {.column width=\"60%\"}\n",
    ":::: {.r-stack}\n",
    "::: {.fragment}\n",
    "![Soundscapy Documentation Homepage](images/soundscapy-homepage.png)\n",
    ":::\n",
    "\n",
    ":::{.fragment}\n",
    "![ - ](images/binaural-tutorial.png)\n",
    "\n",
    ":::\n",
    "\n",
    "::::\n",
    ":::::\n",
    "\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Highlight the comprehensive nature of the documentation.\n",
    "Mention the open-source aspect and community involvement possibilities.\n",
    "Emphasize the commitment to keeping the package and its documentation up-to-date.\n",
    ":::\n",
    "\n",
    "## Future Work: Predictive Models^[@Hou2024Soundscape]\n",
    "\n",
    "![Modular Framework](images/Soundscapy2.png){height=\"550\"}\n",
    "\n",
    ":::{.fragment}\n",
    "::::: {.columns .auto-stretch}\n",
    "::: {.column width=\"48%\"}\n",
    "- **Pretrained Models Integration**:\n",
    "  - Predict soundscape perception from acoustic features\n",
    "  - Multiple model support for comparison\n",
    "\n",
    ":::\n",
    "\n",
    "::: {.column width=\"48%\"}\n",
    "\n",
    "- **Design Optimization**:\n",
    "  - Predict impact of soundscape interventions\n",
    "  - Assist in urban planning decisions\n",
    ":::\n",
    ":::::\n",
    ":::\n",
    "\n",
    "::: notes\n",
    "Explain the potential of integrating pretrained models for soundscape prediction.\n",
    "Discuss the implications for automated assessment and design optimization.\n",
    "Highlight how this could change the landscape of soundscape research and urban planning.\n",
    ":::\n",
    "\n",
    "## Future Work: Soundscape Perception Indices (SPI)^[@Mitchell2024Soundscape]\n",
    "\n",
    ":::: columns\n",
    "\n",
    "::: {.column width=48%}\n",
    "\n",
    "- **Single Index Calculation**:\n",
    "  - Simplify complex soundscape data\n",
    "  - Enable quick comparisons between locations\n",
    "\n",
    "- **Standardized Reporting**:\n",
    "  - Facilitate communication with stakeholders\n",
    "  - Support policy-making processes\n",
    ":::\n",
    "\n",
    "::: {.column width=48%}\n",
    "\n",
    "- **Customizable Weighting**:\n",
    "  - Adapt to different cultural contexts\n",
    "  - Account for varying research priorities\n",
    "\n",
    "- **Applications**:\n",
    "  - Urban planning and design optimization\n",
    "  - Environmental quality assessment\n",
    "  - Cross-cultural soundscape studies\n",
    ":::\n",
    "::::\n",
    "\n",
    "![SPI Calculation Framework](images/SPI-framework.drawio.png)\n",
    "\n",
    "::: notes\n",
    "Introduce the concept of Soundscape Perception Indices (SPI).\n",
    "Explain how it simplifies complex data for easier interpretation and comparison.\n",
    "Discuss the potential applications in urban planning, policy-making, and cross-cultural studies.\n",
    ":::\n",
    "\n",
    "## Conclusion\n",
    "\n",
    "::::: {.columns}\n",
    ":::: {.column width=\"65%\"}\n",
    "\n",
    "- **Standardized Analysis**: Consistent with ISO 12913-3 guidelines\n",
    "\n",
    "- **User-Friendly**: Easy-to-use Python package for researchers and practitioners\n",
    "\n",
    "- **Powerful Tools**: \n",
    "  - Distribution-based visualization\n",
    "  - Comprehensive psychoacoustic analysis\n",
    "  - Efficient batch processing\n",
    "\n",
    "- **Future-Ready**: \n",
    "  - Ongoing development for predictive models\n",
    "  - SPI for simplified soundscape assessment\n",
    "\n",
    "- **Get Involved**:\n",
    "  - GitHub: [github.com/MitchellAcoustics/Soundscapy](https://github.com/MitchellAcoustics/Soundscapy)\n",
    "  - Docs: [soundscapy.readthedocs.io](https://soundscapy.readthedocs.io)\n",
    "  - PyPI: `pip install soundscapy`\n",
    "\n",
    "::::\n",
    "\n",
    ":::: {.column width=\"35%\" .center}\n",
    "\n",
    "[![](images/qr.png)](https://soundscapy.readthedocs.io/en/latest/){.center}\n",
    "\n",
    "::::\n",
    "\n",
    ":::::\n",
    "\n",
    "::: notes\n",
    "Summarize the key benefits and features of Soundscapy.\n",
    "Emphasize its alignment with ISO standards and its user-friendly nature.\n",
    "Highlight the ongoing development and future directions.\n",
    "Encourage audience engagement and contributions.\n",
    "Provide clear information on how to access and start using Soundscapy.\n",
    ":::\n",
    "\n",
    "## References\n",
    "\n",
    "::: {.columns}\n",
    "\n",
    ":::: {.column width=65%} \n",
    "::: {#refs}\n",
    ":::\n",
    "::::\n",
    "\n",
    ":::: {.column width=35%}\n",
    "\n",
    "Also check out my other package for even more advanced circumplex analysis, currently under development!\n",
    "\n",
    "[![](images/qr-2.png)](ttps://circumplex.readthedocs.io/en/latest/)\n",
    "\n",
    "This presentation is available online at [https://mitchellacoustics.quarto.pub/internoise-2024-soundscapy-pres](https://mitchellacoustics.quarto.pub/internoise-2024-soundscapy-pres/#/title-slide)\n",
    "\n",
    "::::\n",
    "\n",
    ":::"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/mitch/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Fellowship/Papers - Drafts/C2402_InterNoise_Soundscapy/.venv/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0d1fbf51882442249c0382d80f3f58d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2251c54ce4bc4625a6af5acde38b1394": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7eec3c3ddf0243159684beb3f3124be1",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_abad91874eda47eb9d71ce87705bf1e6",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "3a8887622ca84875938465cd885bb3e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d5259993f01e4f4b972b766f97db5abb",
        "IPY_MODEL_2251c54ce4bc4625a6af5acde38b1394",
        "IPY_MODEL_c022d04be22e480bac3f87be92f22d55"
       ],
       "layout": "IPY_MODEL_b5db3fdb44714ed68ea157dae739bc29",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6a9704a2191d44d68db718c9b5c0edb9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7eec3c3ddf0243159684beb3f3124be1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "90e52f3bdf994dc5b803689ac24ca198": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a52edc79a4964f29b76d54138d596442": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "abad91874eda47eb9d71ce87705bf1e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b5db3fdb44714ed68ea157dae739bc29": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c022d04be22e480bac3f87be92f22d55": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_90e52f3bdf994dc5b803689ac24ca198",
       "placeholder": "​",
       "style": "IPY_MODEL_0d1fbf51882442249c0382d80f3f58d5",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [08:20&lt;00:00, 11.94s/it]"
      }
     },
     "d5259993f01e4f4b972b766f97db5abb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a52edc79a4964f29b76d54138d596442",
       "placeholder": "​",
       "style": "IPY_MODEL_6a9704a2191d44d68db718c9b5c0edb9",
       "tabbable": null,
       "tooltip": null,
       "value": "Analyzing files: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
